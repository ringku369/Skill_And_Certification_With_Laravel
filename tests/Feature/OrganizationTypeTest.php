<?php

namespace Tests\Feature;

use App\Models\OrganizationType;
use Faker\Factory as Faker;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use App\Models\User;
use Tests\TestCase;
use Illuminate\Support\Facades\DB;

class OrganizationTypeTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = User::findOrFail(1);
        $this->actingAs($user);
        DB::beginTransaction();
    }

    protected function tearDown(): void
    {
        DB::rollBack();

        //parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testCreateOrganizationType()
    {

        $this->setUp();
        $faker = Faker::create();


        $response = $this->post(route('admin.organization-types.store'), [
            '_token' => csrf_token(),
            'title' => $faker->companySuffix,
            'is_government' => 1,
        ]);
        $response->assertSessionHasNoErrors();
        $response->assertStatus(302);

        $this->tearDown();
    }

    public function testUpdateOrganizationType()
    {
        $this->setUp();
        $faker = Faker::create();

        $organizationType = OrganizationType::first();;

        $response = $this->put(route('admin.organization-types.update', $organizationType->id), [
            '_token' => csrf_token(),
            'title' => $faker->company,
            'is_government' => 1,
            'row_status' => 1
        ]);
        $response->assertSessionHasNoErrors();
        $response->assertStatus(302);
        $this->tearDown();
    }

    public function testDeleteOrganizationType()
    {
        $this->setUp();

        $organizationType = OrganizationType::first();;
        $response = $this->get(route('admin.organization-types.destroy', $organizationType->id), [
            '_token' => csrf_token(),
        ]);
        $response->assertStatus(200);
        $this->tearDown();
    }
}
